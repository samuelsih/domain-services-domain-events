Domain Service & Domain Events

30 Maret 2023

Muhammad Ferdian Iqbal
Naufal Adli Purnama
Samuel

* DDD
.image assets/ddd.jpeg

* Layer
.image assets/arch.jpeg 500 850

* Domain Service
Encapsulates business logic that doesn't naturally fit within a domain object, and are *NOT* *typical* *CRUD* *operations* – those would belong to a Repository.

Domain Services does not handle sessions or requests. It does not know anything about UI components. It does not execute database migration. It does not validate user input. Domain Service only manages business logic.

* Application Service vs Domain Service

Application service = _order_an_ebook_or_give_me_the_list_of_available_ebooks_
Domain service = _calculate_the_order_total_


* Example = Exchange Rate
    interface ExchangerRate {
        public bool IsConversionPossible(from, to)
        public Money Convert(from, to)
    }

* Service Implements
    class ExchangeRateService implements ExchangerRate {
        Repository repo;

        public bool IsConversionPossible(from, to) {
            // logic

            return true
        }

        public Money Convert(from, to) {
            Money money

            // some logic

            return money
        }
    }

* Another One
    class CasinoService {
        Repository bonusRepo
        AccountService accountService

        void Bet(account, money) {
            bonuses = this.bonusRepo.FindAllEligibleFor(account, money)

            // logic

            for bonus in range bonuses {
                bonus.Apply(account)
            }

            this.accountService.Update(account)

            print("GACORRRR!!!!!!!!!!")
        }
    }


* Note
Domain Service must NOT hold a state. Domain Service must NOT contain any field that has a state, as well

    // entity keeps state
    class Account {
        UUID id
        Person person
        List<Wallet> wallets
    }

    // value object keeps state
    class Money {
        int amount
        Currency currency
    }


* Service
    class ExchangeRateService {
        Repository repo
        bool forceRefresh
    }

    class CasinoService {
        Repository bonusRepo
        Factory bonusFactory
        AccountService accountService
    }


* Wrong

    class TransactionService {
        Repository bonusRepository
        Money result

        void Deposit(Account account, Money money) {
            bonuses = this.bonusRepository.FindAllEligibleFor(account, money)
            
            //some logic

            this.result = this.result.Add(money) // changing state
        }
    }

* Instead, do this

    class TransactionService {
        Repository bonusRepo

        void Deposit(Money current, Account account, Money money) {
            bonuses = this.bonusRepository.FindAllEligibleFor(account, money)
            
            //some logic

            current.Add(money) 
        }
    }

* Summary
- Domain services carry domain knowledge; application services don’t (ideally)
- Domain services hold domain logic that doesn’t naturally fit entities and value objects
- Introduce domain services when you see that some logic cannot be attributed to an entity/value object because that would break their isolation.


* Domain Events
Events = peristiwa atau sesuatu yang telah terjadi di masa lalu

Dalam aplikasi yang kita buat kita bisa mencatat kejadian tersebut dengan informasi yang kita perlukan sebagai Domain Event.


* Mengapa Butuh Domain Events?
Memberi sistem kita kesempatan untuk *membalas* *atau* *memberi* *response* terhadap kejadian

_kalau_ada_orang_yang_mau_connect_dengan_kita_di_LinkedIn,_kita_harus_buka_aplikasinya_baru_bisa_tau_kalau_CEO_Google_mau_connect_sama_kita._Tapi_karena_kita_kelamaan_ngeliatnya_gajadi_dia,_itu_bisa_jadi_kesempatan_yang_hilang_ (；′⌒`)

* Pertimbangan

- Apakah setiap ada update database kita harus peduli?
- Apakah user harus dikirim notifikasi setiap dia login/register?
- Apakah setiap gerakan kita harus dicatat dalam daftar log?
- Apakah kita harus selalu chat pacar kalo kita mau main sama temen?

Jawabannya: *it* *depends*

* Contoh: User memesan ojek online

Setiap events dapat dimasukkan ke dalam sejenis worker

    List<String> events = new List<String>();
    events.push('Pelanggan memesan objek');


Mengapa perlu mencatat ini sebagai domain event?
Domainnya platform transportasi jadi kegiatan memesan itu penting buat bisnis.
Kita perlu menerima pesanan pelanggan dan mencari gojek terdekat untuk mengantar pelanggan.

_Siapa_yang_pesan?_Di_mana_dia?_Mau_ke_mana?_Bayar_pake_apa?_


* Base Events
    public class Event {
        public DateTime timestamp { get; private set; }
        public String message { get; private set; }

        Event(String message, DateTime timestamp) {
            this.message = message;
            this.timestamp = timestamp;
        }
    }

* Events
    public class CustomerOrderedOjekEvent : Event {
        public int customerId { get; }
        private set;
        public int orderId { get; }
        private set;

        CustomerOrderedOjekEvent(
                int customerId, 
                int orderId, 
                String message, 
                DateTime timestamp
        ) : base(message, timestamp) {
                this.customerId = customerId;
                this.orderId = orderId;
        }
    }

* Contoh
    List<Event> events = new List<Event>();
    events.push(new CustomerOrderedOjekEvent(customerId, orderId, message, timestamp));

* Domain Events >< Exception Handling

    public class DomainEventPublisher {
        public <T> void publish(final T event) {
            // jika sudah / sedang dipublish, return
            if (publishing.get()) {
                return;
            }
            ...
        }
    }

* Lanjutan
    ...
    try {
            publishing.set(true);
            List<DomainEventSubscriber<T>> registeredSubscriber = subscribers.get();
            if (registeredSubscriber != null) {
                Class<?> eventType = event.getClass();

                for(DomainEventSubscriber<T> subscriber : registeredSubscriber) {
                    Class<?> subscribedTo = subscriber.subscribeToEventType();
                    if(subscribedTo == eventType || subscribedTo == DomainEvent.class) {
                        subscriber.handleEvent(event);
                    }
                }
            }

    } catch(Exception e) {
            Logger.sendTo(Provider.SLACK, e);
    } finally {
            publishing.set(false);
    }

* Diagram
.image assets/domain_event_diagram.png 500 800